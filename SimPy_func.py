{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a228250-c957-4258-89af-3f8a9e164222",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy import optimize\n",
    "from numpy.random import default_rng\n",
    "import simpy\n",
    "\n",
    "\n",
    "class Model():\n",
    "    \"\"\"Base class for models\"\"\"\n",
    "    \n",
    "def patient_arrivals(env, interarrival_time=5.0):\n",
    "    \"\"\"Generate patients according to a fixed time arrival process\"\"\"\n",
    "\n",
    "    # Create a counter to keep track of number of patients generated and to serve as unique patient id\n",
    "    patient = 0\n",
    "\n",
    "    # Infinite loop for generating patients\n",
    "    while True:\n",
    "\n",
    "        # Generate next interarrival time (this will be more complicated later)\n",
    "        iat = interarrival_time\n",
    "        \n",
    "        # This process will now yield to a 'timeout' event. This process will resume after iat time units.\n",
    "        yield env.timeout(iat)\n",
    "\n",
    "        # Okay, we're back. :) New patient generated = update counter of patients\n",
    "        patient += 1\n",
    "        \n",
    "        print(f\"Patient {patient} created at time {env.now}\")\n",
    "        \n",
    "def simplified_blood_donation(env, name, mean_prebd_time, mean_bd_time, mean_postbd_time, bd_tech):\n",
    "    \"\"\"Process function modeling how a patient flows through system.\"\"\"\n",
    "\n",
    "    print(f\"{name} entering blood donation clinic at {env.now:.4f}\")\n",
    "    \n",
    "    # Yield for the pre-blood donation time\n",
    "    yield env.timeout(rg.exponential(mean_prebd_time))\n",
    "    \n",
    "    # Request blood draw technician to start blood draw\n",
    "    with bd_tech.request() as request:\n",
    "        print(f\"{name} requested blood draw tech at {env.now:.4f}\")\n",
    "        yield request\n",
    "        print(f\"{name} got blood draw tech at {env.now:.4f}\")\n",
    "        yield env.timeout(rg.normal(mean_bd_time, 0.5))\n",
    "                          \n",
    "    # Yield for the post-blood donation time\n",
    "    yield env.timeout(mean_postbd_time)\n",
    "    \n",
    "    # The process is over, we would exit the clinic\n",
    "    print(f\"{name} exiting blood donation clinic at {env.now:.4f}\")\n",
    "    \n",
    "def patient_arrivals_random_2(env, mean_interarrival_time, mean_prebd_time, mean_bd_time,\n",
    "                              mean_postbd_time, bd_tech, rg=default_rng(0)):\n",
    "    \"\"\"Generate patients according to a Poisson arrival process\"\"\"\n",
    "\n",
    "    # Create a counter to keep track of number of patients generated and to serve as unique patient id\n",
    "    patient = 0\n",
    "\n",
    "    # Infinite loop for generating patients\n",
    "    while True:\n",
    "\n",
    "        # Generate next interarrival time\n",
    "        iat = rg.exponential(mean_interarrival_time)\n",
    "        \n",
    "        # This process will now yield to a 'timeout' event. This process will resume after iat time units.\n",
    "        yield env.timeout(iat)\n",
    "\n",
    "        # Update counter of patients\n",
    "        patient += 1\n",
    "\n",
    "        print(f\"Patient{patient} created at time {env.now}\")\n",
    "               \n",
    "        # Create and register the simplifed blood donation process in two steps\n",
    "        \n",
    "        # Create a new patient delay process generator object.\n",
    "        patient_visit = simplified_blood_donation(env, 'Patient{}'.format(patient), \n",
    "                                               mean_prebd_time, mean_bd_time, mean_postbd_time, bd_tech)\n",
    "        \n",
    "        # Register the process with the simulation environment\n",
    "        env.process(patient_visit)\n",
    "        \n",
    "        # Here's the one step version\n",
    "        # env.process(simplified_blood_donation(env, 'Patient{}'.format(patient), \n",
    "        #                                      mean_prebd_time, mean_bd_time, mean_postbd_time, bd_tech))\n",
    "        \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:aap]",
   "language": "python",
   "name": "conda-env-aap-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
